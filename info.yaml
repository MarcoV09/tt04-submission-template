--- 
# TinyTapeout project information
project: Oscilador de anillo con programabilidad de retardo
  wokwi_id:    373357340877142017 

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Marco Antonio Vázquez Robles"
  title:        "Oscilador de anillo con programabilidad de retardo"
  language:     "Wokwi"
  description:  "Dos osciladores de anillo de 21 etapas, uno con capacidad de programabilidad de etapas; y un generador de fases de reloj sin traslape" 
  
# Longer description of how the project works. You can use standard markdown format
  how_it_works: |
      El proyecto consta de 3 modulos con diferentes propositos; un oscilador de anillo programable, el oscilador de anillo de 21 etapas y un generador de fases 
      sin traslape. El oscilador de anillo programable tiene dos modulos: un decodificador 4 a 10, y un anillo de 21 compuertas NOT que en las etapas impares tiene 
      compuertas AND (que hacen la función de switch) para formar el lazo cerrado. Para su funcionamiento, se requiere ingresar una palabra de 4 bits (A, B, C, D) 
      que indicara la cantidad de retardos que se quieren utilizar en el oscilador; con esto, se mandara una señal especifica a la compuerta AND pertinente para 
      cerrar el lazo en esa etapa y mandar alta impedancia al resto de etapas, y solo hasta la etapa correspondiente pueda oscilar. Su proposito es generar frecuencias
      discretas en funcion del numero de etapas del anillo y su retardo intrinseco.
      El oscilador de anillo de 21 etapas sencillo, solo funciona como una referencia de frecuencia, un generador perpetuo de una señal constante.
      Ademas, se agrega un generador de fases sin traslape que se alimentara de las señales de salida del oscilador (F y F') y generara las señales no traslapadas f y f'.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Primordialmente, para caracterizar el oscilador de anillo programable, se requiere ingresar una palabra de 4 bits en las entradas pertinentes, teniendo
      solo como posibles valores 2 (en binario) hasta 11. Por ejemplo, al ingresar un 2 ('0010') se activaran 3 etapas, al ingresar un 3 ('0011') se
      activaran 5 etapas, y asi sucesivamente hasta ingresar 11 ('1011') podamos tener 21 etapas que influyen en la frecuencia del oscilador  y su
      complemento (F y F'). El propósito es obtener la curva de desempeño frecuencia vs número de etapas, de manera que permita inferir (de resultados experimentales) 
      el efecto de la carga CL (definida por el diseñador) y determinar la capacitancia parásita de la tecnología. En el mismo tenor la idea es obtener la curva de 
      desempeño frecuencia vs VDD para evaluar el rango de polarización y el consumo dinámico correspondiente. 
      El oscilador de anillo simple, al no tener entrada, solo se requiere revisar si su frecuencia de salida y su inversa, son constantes. Como tal servirá para 
      cuantificar el retardo de la tecnología y estimar la frecuencia máxima de operación; de utiliad para comparar con la información obtenida del oscilador programable.
      El generador de fases se debe alimentar de las señales F y F' (que podemos extraer de la salida del oscilador de anillo simple) para generar señales no 
      traslapadas f y f'. El fin último es cuantificar el efecto del retardo en la definición dela zona de no traslape y valorar el control del ciclo de trabajo; 
      información que servirá para comparar también con la información capturada del oscilador programable.

      
# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - CLK
    - RST
    - A
    - B
    - C
    - D
    - INF
    - INF'
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - AF
    - AF'
    - BF
    - BF'
    - f
    - f'

# The following fields are optional
  tag:          ""      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
